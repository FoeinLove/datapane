name: Test [Datapane]

on:
  # Run on all PRs (any branch)
  pull_request:

jobs:
  datapane-multi-env:
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        python-version: [3.6] #, 3.7, 3.8]
        os: [ubuntu-latest, windows-latest] # macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Enable symlinks on Windows
        run: git config --global core.symlinks true
        if: startsWith(runner.os, 'Windows')
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Dump Runner Info
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "${RUNNER_CONTEXT}"
          which python
      - name: set pip cache dir
        shell: python
        run: |
          from pip._internal.locations import USER_CACHE_DIR
          print(f"::set-env name=PIP_DIR::{USER_CACHE_DIR}")
      - name: set python version
        shell: python
        run: |
          import sys
          print(f"::set-env name=PYTHON_VERSION::{sys.hexversion}")
      # TODO - cache the poetry pypi cache dir? (tho as we cache the venv is it needed?)
#      - name: Cache .venv
#        uses: actions/cache@v1
#        with:
#          path: .venv
#          key: datapane-venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
#          restore-keys: datapane-venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
#      - name: Cache pip dir (${{ env.PIP_DIR }})
#        uses: actions/cache@v1
#        with:
#          path: ${{ env.PIP_DIR }}
#          key: datapane-pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}
#          restore-keys: |
#            datapane-pip-${{ runner.os }}-
      - name: Run Tests
        run: |
          pip install "poetry>=1.0.0,<1.1.0"
          poetry config virtualenvs.in-project true
          # rmdir --ignore-fail-on-non-empty -v .venv
          poetry install
          # run CLI tests (junit tests not captured yet)
          poetry run python -m pytest --ignore=tests/client/e2e/ . --junitxml=${{github.workspace}}/test-reports/datapane-local-${{ matrix.os }}-${{ matrix.python-version }}.xml
